# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type DevOptions {
  main: String
  microAppOptions: MicroAppOptions
}

input DevOptionsInput {
  main: String
  microAppOptions: MicroAppOptionsInput
}

enum ENTITY_TYPE {
  APP
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum LICENSE_ROLE {
  MEMBER
  OWNER
}

type License {
  id: ID!
  licensable: licensable!
  licensableId: String!
  licensableType: ENTITY_TYPE!
  role: LICENSE_ROLE!
  user: User!
  userId: String!
}

type LicenseActionResult {
  licensable: licensable!
}

input LoginInput {
  id: String!
  name: String!
}

type MenuConfig {
  enabled: Boolean
  menus: JSON
}

input MenuConfigInput {
  enabled: Boolean
  menus: JSON
}

type MicroAppOptions {
  disableSandbox: Boolean!
  inline: Boolean!
  shadowDOM: Boolean!
}

input MicroAppOptionsInput {
  disableSandbox: Boolean!
  inline: Boolean!
  shadowDOM: Boolean!
}

type Mutation {
  addLicense(licensableId: String!, role: LICENSE_ROLE!, userId: String!): LicenseActionResult!
  addStar(starrableId: String!): StarActionResult!
  addVisitRecord(visitableId: String!): VisitRecordActionResult!
  createApp(app: NewAppInput!): app!
  deleteApp(key: String!): app!
  login(input: LoginInput!): Token!
  removeLicense(id: String, licensableId: String, userId: String): LicenseActionResult!
  removeStar(starrableId: String!): StarActionResult!
  updateApp(app: UpdateAppInput!): app!
  updateStar(type: String!, updateStarredList: [UpdateStarInput!]!): StarActionsResult!
}

input NewAppInput {
  classification: String!
  devOptions: DevOptionsInput
  disabled: Boolean
  icon: String!
  isBaseApp: Boolean
  key: String!
  label: String!
  menuConfig: MenuConfigInput
  path: String!
}

type PaginatedApp {
  data: [app!]
  totalCount: Int!
}

type PaginatedLicense {
  data: [License!]
  totalCount: Int!
}

type PaginatedUser {
  data: [User!]
  totalCount: Int!
}

type PaginatedVisitRecord {
  data: [VisitRecord!]
  totalCount: Int!
}

type Query {
  app(key: String!): app!
  apps(disabled: Boolean, key: String, pageInfo: pageInfo): PaginatedApp!
  user: User!
  users(name: String, pageInfo: pageInfo): PaginatedUser!
}

type StarActionResult {
  starrable: starrable!
}

type StarActionsResult {
  starrable: [starrable!]!
}

type Token {
  token: String!
}

input UpdateAppInput {
  classification: String
  devOptions: DevOptionsInput
  disabled: Boolean
  icon: String
  isBaseApp: Boolean
  key: String!
  label: String
  menuConfig: MenuConfigInput
  path: String
}

input UpdateStarInput {
  index: Float!
  starrableId: String!
}

"""user"""
type User {
  apps(pageInfo: pageInfo): [app!]!
  id: ID!
  license(licensableId: String!): License!
  name: String!
  starredApps(pageInfo: pageInfo): [app!]!
  visitRecords(pageInfo: pageInfo, visitableType: ENTITY_TYPE): PaginatedVisitRecord!
}

"""最近访问"""
type VisitRecord {
  id: ID!
  recordTime: Float!
  userId: String!
  visitable: Visitable!
  visitableId: String!
  visitableType: ENTITY_TYPE!
}

type VisitRecordActionResult {
  visitable: Visitable!
}

union Visitable = app

"""app"""
type app {
  classification: String!
  devOptions: DevOptions
  disabled: Boolean!
  icon: String!
  isBaseApp: Boolean!
  key: ID!
  label: String!
  licences(pageInfo: pageInfo, role: LICENSE_ROLE): PaginatedLicense!
  menuConfig: MenuConfig
  path: String!
}

union licensable = app

input pageInfo {
  page: Float!
  size: Float!
}

union starrable = app
